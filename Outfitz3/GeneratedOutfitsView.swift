import SwiftUI

struct GeneratedOutfitsView: View {
    let generatedImages: [String] // Holds URLs to the images
    let generatedText: String // This should hold the outfit description generated by the API
    let occasion: String
    let style: String
    let colors: String
    let additionalPreferences: String
    let mainClothingPiece: String
    let details: String
    let accessories: String

    var body: some View {
        ZStack {
            // Gradient background
            LinearGradient(gradient: Gradient(colors: [Color.purple, Color.pink]),
                           startPoint: .top, endPoint: .bottom)
                .edgesIgnoringSafeArea(.all) // Ensure the gradient covers the entire screen

            ScrollView {
                VStack(alignment: .leading, spacing: 20) {
                    // Display the generated image
                    if let firstImageURL = generatedImages.first, let url = URL(string: firstImageURL) {
                        AsyncImage(url: url) { phase in
                            switch phase {
                            case .empty:
                                ProgressView()
                            case .success(let image):
                                image
                                    .resizable()
                                    .aspectRatio(contentMode: .fit)
                                    .frame(height: 300)
                                    .clipShape(RoundedRectangle(cornerRadius: 10))
                            case .failure:
                                Image(systemName: "photo")
                                    .resizable()
                                    .aspectRatio(contentMode: .fit)
                                    .frame(height: 300)
                            @unknown default:
                                EmptyView()
                            }
                        }
                        .frame(height: 300)
                    }

                    // Display the generated outfit description
                    Text("Outfit Description")
                        .font(.headline)
                        .foregroundColor(.white) // Make text pop
                        .padding(.top)
                    
                    // Use generatedText for the description
                    Text(generatedText) // This holds the API response for the outfit description
                        .font(.body)
                        .foregroundColor(.white) // Make text pop
                        .padding(.horizontal)

                    // Display additional details like Occasion, Style, etc.
                    Group {
                        DetailRow(title: "Occasion", detail: occasion.isEmpty ? "Not specified" : occasion)
                        DetailRow(title: "Style", detail: style.isEmpty ? "Not specified" : style)
                        DetailRow(title: "Colors", detail: colors.isEmpty ? "No color palette specified" : colors)
                        DetailRow(title: "Main Clothing Piece", detail: mainClothingPiece.isEmpty ? "No main clothing piece specified" : mainClothingPiece)
                        DetailRow(title: "Details", detail: details.isEmpty ? "No details specified" : details)
                        DetailRow(title: "Accessories", detail: accessories.isEmpty ? "No accessories specified" : accessories)
                        if !additionalPreferences.isEmpty {
                            DetailRow(title: "Additional Preferences", detail: additionalPreferences)
                        }
                    }
                }
                .padding()
            }
            .padding()
        }
        .navigationTitle("Generated Outfit")
    }
}

// A reusable view for displaying details like Occasion, Style, etc.
struct DetailRow: View {
    let title: String
    let detail: String

    var body: some View {
        VStack(alignment: .leading) {
            Text(title)
                .font(.headline)
                .foregroundColor(.white) // Make text pop
            Text(detail)
                .padding(.leading)
                .font(.body)
                .foregroundColor(.white) // Make text pop
        }
        .padding(.bottom, 5)
    }
}

struct GeneratedOutfitsView_Previews: PreviewProvider {
    static var previews: some View {
        GeneratedOutfitsView(
            generatedImages: ["https://example.com/image.png"],
            generatedText: """
**Outfit Title: Radiant Elegance**

**Dress:** A floor-length A-line gown in a rich royal blue satin fabric, featuring a sweetheart neckline and a fitted bodice that elegantly flows into a voluminous skirt, exuding an air of timeless sophistication.

**Accessories:** Bold statement earrings adorned with vibrant gemstones in shades of fuchsia and gold, adding a touch of drama and brilliance that perfectly complements the gown.

**Shoes:** Strappy metallic gold heels that add a hint of glamour while providing a subtle shine, elevating the overall look without overpowering it.

**Clutch:** A sleek, structured clutch in a bright coral hue with gold accents, offering a chic contrast to the blue gown and providing just enough space for essentials.
""",
            occasion: "Formal evening gala",
            style: "Classic and timeless",
            colors: "Bright and Bold Colors",
            additionalPreferences: "I prefer breathable fabrics and comfort.",
            mainClothingPiece: "Elegant dress",
            details: "Delicate lace and flowing fabric",
            accessories: "Statement earrings"
        )
    }
}
